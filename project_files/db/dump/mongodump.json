{ "_id" : { "$oid" : "55107f3444ae143d89176e8b" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : { "$numberLong" : "10" }, "author" : "Populator", "tags" : [ "for", "system.out.println", "циклы", "вывод" ], "authorityName" : "alex", "creationDate" : { "$date" : "2015-03-23T21:01:40.768+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-27T21:50:20.715+0000" }, "approvalDate" : { "$date" : "2014-12-31T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "BEGINNER", "taskName" : "Я никогда не буду работать за копейки", "condition" : "Используя цикл вывести на экран сто раз надпись: \n \"Я никогда не буду работать за копейки. Амиго\"", "sourceCode" : "public class Solution { \n\n\t public static void main(String[] args) { \n\n\t\t for(int i = 0; i < 100; ++i) \n\t\t\t System.out.println(\"Я никогда не буду работать за копейки. Амиго\"); \n\n\t } \n }", "templateCode" : "public class Solution { \n\n\t public static void main(String[] args) { \n\n\t\t // Input your code here  \n\n\t } \n }", "tests" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SolutionTest {\n    //catch console output\n    PrintStream ps;  // save ref to sout\n    ByteArrayOutputStream out;  // create  byte array for info\n    PrintStream printStream;\n\n    String[] result; // take result of console output\n\n\n    @Before\n    public void setUp() throws Exception {\n        //output data\n        ps = System.out;  // save ref to sout\n\n        out = new ByteArrayOutputStream();  // create  byte array for info\n        printStream = new PrintStream(out);\n\n        System.setOut(printStream);\n\n    }\n\n    @Test\n    public void testMain() throws Exception {\n        Solution.main(null);\n        result = out.toString().split(\"\\\\r?\\\\n\");\n        assertEquals(result[0], \"Я никогда не буду работать за копейки. Амиго\");\n\n    }\n\n    @Test\n    public void secondTestMain() throws Exception {\n        Solution.main(null);\n        result = out.toString().split(\"\\\\r?\\\\n\");\n        assertEquals(100, result.length);\n    }\n}", "rating" : 0, "votersAmount" : 0, "likedBy" : [], "dislikedBy" : [], "averageAttempts" : 88.53, "successfulAttempts" : 13, "failureAttempts" : 13, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "55107f3444ae143d89176e8c" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : 0, "author" : "Populator", "tags" : [ "конструкторы", "класс" ], "authorityName" : "alex", "creationDate" : { "$date" : "2015-03-23T21:01:40.809+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-23T21:01:40.809+0000" }, "approvalDate" : { "$date" : "2014-12-31T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "BEGINNER", "taskName" : "Конструкторы для Rectangle", "condition" : "Создать класс прямоугольник (Rectangle).\nЕго данными будут top, left, width, height (левая координата, верхняя, ширина и высота).\nСоздать для него как можно больше конструкторов:\nПримеры:\n-    заданы 4 параметра: left, top, width, height\n-    ширина/высота не задана (оба равны 0)\n-    высота не задана (равно ширине) создаём квадрат\n-    создаём копию другого прямоугольника (он и передаётся в параметрах)", "sourceCode" : "public class Rectangle\n{\n    private int left;\n    private int top;\n    private int width;\n    private int height;\n\n    public Rectangle(int side_len) {\n        this.width = side_len;\n        this.height = side_len;\n    }\n\n    public Rectangle(int left, int top) {\n        this.left = left;\n        this.top = top;\n    }\n\n    public Rectangle(int left, int top, int side_len) {\n        this.left = left;\n        this.top = top;\n        this.width = side_len;\n        this.height = side_len;\n    }\n\n    public Rectangle(int left, int top, int width, int height) {\n        this.left = left;\n        this.top = top;\n        this.height = height;\n        this.width = width;\n    }\n\n    public Rectangle(Rectangle r) {\n        this.left = r.left;\n        this.top = r.top;\n        this.height = r.height;\n        this.width = r.width;\n    }\n}", "templateCode" : "public class Rectangle\n{\n    private int left;\n    private int top;\n    private int width;\n    private int height;\n\n    // Insert your code here\n\n}", "tests" : "import org.junit.Test;\nimport java.lang.reflect.Constructor;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class RectangleTest {\n\n    @Test\n    public void test() throws Exception {\n        Constructor[] constructors = Rectangle.class.getConstructors();\n        assertTrue(\"The number of constructors must be greater or equals 4\", constructors.length > 3);\n    }\n}", "rating" : 2, "votersAmount" : 3, "likedBy" : [ "Populator", "beast" ], "dislikedBy" : [ "sashok" ], "averageAttempts" : 88.53, "successfulAttempts" : 12, "failureAttempts" : 1, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "55107f3444ae143d89176e8d" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : { "$numberLong" : "1" }, "author" : "Populator", "tags" : [ "конструкторы", "класс", "cat" ], "authorityName" : "sashok", "creationDate" : { "$date" : "2015-03-23T21:01:40.815+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-23T21:01:40.815+0000" }, "approvalDate" : { "$date" : "2014-12-31T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "JUNIOR", "taskName" : "Создать класс Cat (кот) с пятью конструкторами", "condition" : "Создать класс Cat (кот) с пятью конструкторами:\n- Имя,\n- Имя, вес, возраст\n- Имя, возраст (вес стандартный)\n- вес, цвет, (имя, адрес и возраст – неизвестные. Кот - бездомный)\n- вес, цвет, адрес ( чужой домашний кот)\n\nЗадача инициализатора – сделать объект валидным. Например, если вес не известен, то нужно указать какой-нибудь средний вес.\n\nКот не может ничего не весить. То же касательно возраста. А вот имени может и не быть (null). То же касается адреса: null.", "sourceCode" : "public class Cat\n{\n    private String name;\n    private int weight;\n    private int age;\n    private int color;\n    private String address;\n\n    public static final int STANDARD_WEIGHT = 2;\n    public static final int STANDARD_AGE = 5;\n\n    public Cat(String name) {\n        this.name = name;\n        this.weight = STANDARD_WEIGHT;\n        this.age = STANDARD_AGE;\n    }\n\n    public Cat(String name, int weight, int age) {\n        this.name = name;\n        this.weight = weight;\n        this.age = age;\n    }\n\n    public Cat(String name, int age) {\n        this.name = name;\n        this.weight = STANDARD_WEIGHT;\n        this.age = age;\n    }\n\n    public Cat(int weight, int color) {\n        this.weight = weight;\n        this.color = color;\n        this.age = STANDARD_AGE;\n    }\n\n    public Cat(int weight, int color, String address) {\n        this.weight = weight;\n        this.color = color;\n        this.address = address;\n        this.age = STANDARD_AGE;\n    }\n\n}", "templateCode" : "public class Cat\n{\n    private String name;\n    private int weight;\n    private int age;\n    private int color;\n    private String address;\n\n\n    public Cat(String name) {\n        this.name = name;\n    }\n\n    public Cat(String name, int weight, int age) {\n        this.name = name;\n        this.weight = weight;\n        this.age = age;\n    }\n\n    public Cat(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public Cat(int weight, int color) {\n        this.weight = weight;\n        this.color = color;\n    }\n\n    public Cat(int weight, int color, String address) {\n        this.weight = weight;\n        this.color = color;\n        this.address = address;\n    }\n\n}", "tests" : "import org.junit.Test;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class CatTest {\n\n    @Test\n    public void testNumberConstructors() throws Exception {\n        Constructor[] constructors = Cat.class.getConstructors();\n        assertTrue(\"The number of constructors must be equals 5\", constructors.length == 5);\n    }\n\n    @Test\n    public void testValidObjects() throws Exception {\n        // http://www.java2s.com/Code/Java/Reflection/ObjectReflectioninvokeconstructorwithparameters.htm\n\n        int AVG_AGE = 2;\n        int AVG_WEIGHT = 4;\n\n        Cat[] cats = new Cat[5];\n        cats[0] = new Cat(null);\n        cats[1] = new Cat(null, AVG_WEIGHT, AVG_AGE);\n        cats[2] = new Cat(null, AVG_AGE);\n        cats[3] = new Cat(AVG_WEIGHT, 0);\n        cats[4] = new Cat(AVG_WEIGHT, 0, null);\n\n        Field weightField = Cat.class.getDeclaredField(\"weight\");\n        Field ageField = Cat.class.getDeclaredField(\"age\");\n\n        weightField.setAccessible(true);\n        ageField.setAccessible(true);\n\n        for (Cat cat : cats) {\n            assertTrue(\"The cat's weight must be setted\", weightField.getInt(cat) > 0);\n            assertTrue(\"The cat's age must be setted\", ageField.getInt(cat) > 0);\n        }\n    }\n}", "rating" : 2, "votersAmount" : 3, "likedBy" : [ "Populator", "beast" ], "dislikedBy" : [ "sashok" ], "averageAttempts" : 18.53, "successfulAttempts" : 6, "failureAttempts" : 7, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "55107f3444ae143d89176e8f" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : 0, "author" : "Populator", "tags" : [ "for", "system.out.println", "циклы", "вывод" ], "authorityName" : "alex", "creationDate" : { "$date" : "2015-03-23T21:01:40.823+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-23T21:01:40.823+0000" }, "approvalDate" : { "$date" : "2014-12-31T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "BEGINNER", "taskName" : "Я никогда не буду работать за копейки", "condition" : "Используя цикл вывести на экран сто раз надпись: \n \"Я никогда не буду работать за копейки. Амиго\"", "sourceCode" : "public class Solution { \n\n\t public static void main(String[] args) { \n\n\t\t for(int i = 0; i < 100; ++i) \n\t\t\t System.out.println(\"Я никогда не буду работать за копейки. Амиго\"); \n\n\t } \n }", "templateCode" : "public class Solution { \n\n\t public static void main(String[] args) { \n\n\t\t // Input your code here  \n\n\t } \n }", "tests" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SolutionTest {\n    //catch console output\n    PrintStream ps;  // save ref to sout\n    ByteArrayOutputStream out;  // create  byte array for info\n    PrintStream printStream;\n\n    String[] result; // take result of console output\n\n\n    @Before\n    public void setUp() throws Exception {\n        //output data\n        ps = System.out;  // save ref to sout\n\n        out = new ByteArrayOutputStream();  // create  byte array for info\n        printStream = new PrintStream(out);\n\n        System.setOut(printStream);\n\n    }\n\n    @Test\n    public void testMain() throws Exception {\n        Solution.main(null);\n        result = out.toString().split(\"\\\\r?\\\\n\");\n        assertEquals(result[0], \"Я никогда не буду работать за копейки. Амиго\");\n\n    }\n\n    @Test\n    public void secondTestMain() throws Exception {\n        Solution.main(null);\n        result = out.toString().split(\"\\\\r?\\\\n\");\n        assertEquals(100, result.length);\n    }\n}", "rating" : 0, "votersAmount" : 0, "likedBy" : [], "dislikedBy" : [], "averageAttempts" : 88.53, "successfulAttempts" : 12, "failureAttempts" : 13, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "55107f3444ae143d89176e90" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : { "$numberLong" : "3" }, "author" : "Populator", "tags" : [ "конструкторы", "класс" ], "authorityName" : "alex", "creationDate" : { "$date" : "2015-03-23T21:01:40.827+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-23T21:01:40.827+0000" }, "approvalDate" : { "$date" : "2014-12-31T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "BEGINNER", "taskName" : "Конструкторы для Rectangle", "condition" : "Создать класс прямоугольник (Rectangle).\nЕго данными будут top, left, width, height (левая координата, верхняя, ширина и высота).\nСоздать для него как можно больше конструкторов:\nПримеры:\n-    заданы 4 параметра: left, top, width, height\n-    ширина/высота не задана (оба равны 0)\n-    высота не задана (равно ширине) создаём квадрат\n-    создаём копию другого прямоугольника (он и передаётся в параметрах)", "sourceCode" : "public class Rectangle\n{\n    private int left;\n    private int top;\n    private int width;\n    private int height;\n\n    public Rectangle(int side_len) {\n        this.width = side_len;\n        this.height = side_len;\n    }\n\n    public Rectangle(int left, int top) {\n        this.left = left;\n        this.top = top;\n    }\n\n    public Rectangle(int left, int top, int side_len) {\n        this.left = left;\n        this.top = top;\n        this.width = side_len;\n        this.height = side_len;\n    }\n\n    public Rectangle(int left, int top, int width, int height) {\n        this.left = left;\n        this.top = top;\n        this.height = height;\n        this.width = width;\n    }\n\n    public Rectangle(Rectangle r) {\n        this.left = r.left;\n        this.top = r.top;\n        this.height = r.height;\n        this.width = r.width;\n    }\n}", "templateCode" : "public class Rectangle\n{\n    private int left;\n    private int top;\n    private int width;\n    private int height;\n\n    // Insert your code here\n\n}", "tests" : "import org.junit.Test;\nimport java.lang.reflect.Constructor;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class RectangleTest {\n\n    @Test\n    public void test() throws Exception {\n        Constructor[] constructors = Rectangle.class.getConstructors();\n        assertTrue(\"The number of constructors must be greater or equals 4\", constructors.length > 3);\n    }\n}", "rating" : 0, "votersAmount" : 0, "likedBy" : [], "dislikedBy" : [], "averageAttempts" : 88.53, "successfulAttempts" : 13, "failureAttempts" : 3, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "55107f3444ae143d89176e91" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : 0, "author" : "Populator", "tags" : [ "конструкторы", "класс", "cat" ], "authorityName" : "sashok", "creationDate" : { "$date" : "2015-03-23T21:01:40.829+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-23T21:01:40.829+0000" }, "approvalDate" : { "$date" : "2014-12-31T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "JUNIOR", "taskName" : "Создать класс Cat (кот) с пятью конструкторами", "condition" : "Создать класс Cat (кот) с пятью конструкторами:\n- Имя,\n- Имя, вес, возраст\n- Имя, возраст (вес стандартный)\n- вес, цвет, (имя, адрес и возраст – неизвестные. Кот - бездомный)\n- вес, цвет, адрес ( чужой домашний кот)\n\nЗадача инициализатора – сделать объект валидным. Например, если вес не известен, то нужно указать какой-нибудь средний вес.\n\nКот не может ничего не весить. То же касательно возраста. А вот имени может и не быть (null). То же касается адреса: null.", "sourceCode" : "public class Cat\n{\n    private String name;\n    private int weight;\n    private int age;\n    private int color;\n    private String address;\n\n    public static final int STANDARD_WEIGHT = 2;\n    public static final int STANDARD_AGE = 5;\n\n    public Cat(String name) {\n        this.name = name;\n        this.weight = STANDARD_WEIGHT;\n        this.age = STANDARD_AGE;\n    }\n\n    public Cat(String name, int weight, int age) {\n        this.name = name;\n        this.weight = weight;\n        this.age = age;\n    }\n\n    public Cat(String name, int age) {\n        this.name = name;\n        this.weight = STANDARD_WEIGHT;\n        this.age = age;\n    }\n\n    public Cat(int weight, int color) {\n        this.weight = weight;\n        this.color = color;\n        this.age = STANDARD_AGE;\n    }\n\n    public Cat(int weight, int color, String address) {\n        this.weight = weight;\n        this.color = color;\n        this.address = address;\n        this.age = STANDARD_AGE;\n    }\n\n}", "templateCode" : "public class Cat\n{\n    private String name;\n    private int weight;\n    private int age;\n    private int color;\n    private String address;\n\n\n    public Cat(String name) {\n        this.name = name;\n    }\n\n    public Cat(String name, int weight, int age) {\n        this.name = name;\n        this.weight = weight;\n        this.age = age;\n    }\n\n    public Cat(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public Cat(int weight, int color) {\n        this.weight = weight;\n        this.color = color;\n    }\n\n    public Cat(int weight, int color, String address) {\n        this.weight = weight;\n        this.color = color;\n        this.address = address;\n    }\n\n}", "tests" : "import org.junit.Test;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class CatTest {\n\n    @Test\n    public void testNumberConstructors() throws Exception {\n        Constructor[] constructors = Cat.class.getConstructors();\n        assertTrue(\"The number of constructors must be equals 5\", constructors.length == 5);\n    }\n\n    @Test\n    public void testValidObjects() throws Exception {\n        // http://www.java2s.com/Code/Java/Reflection/ObjectReflectioninvokeconstructorwithparameters.htm\n\n        int AVG_AGE = 2;\n        int AVG_WEIGHT = 4;\n\n        Cat[] cats = new Cat[5];\n        cats[0] = new Cat(null);\n        cats[1] = new Cat(null, AVG_WEIGHT, AVG_AGE);\n        cats[2] = new Cat(null, AVG_AGE);\n        cats[3] = new Cat(AVG_WEIGHT, 0);\n        cats[4] = new Cat(AVG_WEIGHT, 0, null);\n\n        Field weightField = Cat.class.getDeclaredField(\"weight\");\n        Field ageField = Cat.class.getDeclaredField(\"age\");\n\n        weightField.setAccessible(true);\n        ageField.setAccessible(true);\n\n        for (Cat cat : cats) {\n            assertTrue(\"The cat's weight must be setted\", weightField.getInt(cat) > 0);\n            assertTrue(\"The cat's age must be setted\", ageField.getInt(cat) > 0);\n        }\n    }\n}", "rating" : 0, "votersAmount" : 0, "likedBy" : [], "dislikedBy" : [], "averageAttempts" : 18.53, "successfulAttempts" : 5, "failureAttempts" : 7, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "55107f3444ae143d89176e93" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : { "$numberLong" : "3" }, "author" : "Populator", "tags" : [ "конструктор", "system.out.println", "классы", "вывод" ], "authorityName" : "mary", "creationDate" : { "$date" : "2015-03-23T21:01:40.835+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-23T21:01:40.835+0000" }, "approvalDate" : { "$date" : "2015-02-21T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "JUNIOR", "taskName" : "Класс Cat и статическая переменная catCount", "condition" : "В классе Cat создай статическую переменную public int catCount.\nСоздай конструктор [public Cat()].\n Пусть при каждом создании кота (нового объекта Cat) статическая переменная \n catCount увеличивается на 1. Создать 10 объектов Cat и вывести значение переменной catCount на экран.", "sourceCode" : "public class Solution\n {\n public static void main(String[] args) \n{\n//Cоздай 10 объектов Cat тут\nCat cat1 = new Cat();\nCat cat2 = new Cat();\nCat cat3 = new Cat();\nCat cat4 = new Cat();\nCat cat5 = new Cat();\nCat cat6 = new Cat();\nCat cat7 = new Cat();\nCat cat8 = new Cat();\nCat cat9 = new Cat();\nCat cat10 = new Cat();\n\n// Выведи на экран catCount тут\nSystem.out.println(Cat.catCount);\n}\n\npublic static class Cat\n{\n//Cоздай статическую переменную тут\n\npublic static int catCount=0;\n\n//создай конструктор тут\npublic Cat()\n{\ncatCount++;\n}\n}\n\n}\n", "templateCode" : "public class Solution\n{\npublic static void main(String[] args)\n{\n//Cоздай 10 объектов Cat тут\n\n// Выведи на экран catCount тут\n\n}\n\npublic static class Cat\n{\n//Cоздай статическую переменную тут\n\n\n\n//создай конструктор тут\n\n}\n\n}\n\n ", "tests" : "import org.junit.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SolutionTest {\n\n@Test\npublic void testMain2() throws Exception {\nPrintStream ps;\nByteArrayOutputStream out;\nPrintStream printStream;\nString[] result;\nps = System.out;\nout = new ByteArrayOutputStream();\nprintStream = new PrintStream(out);\nSystem.setOut(printStream);\nSolution.main(null);\nresult = out.toString().split(\"\\r?\\n\");\nassertEquals(result[0], \"10\");\nSystem.setOut(ps);\nSolution.Cat cat11 = new Solution.Cat();\nSolution.Cat cat12 = new Solution.Cat();\nassertEquals(Solution.Cat.catCount , 12);\n}\n}\n", "rating" : 1, "votersAmount" : 1, "likedBy" : [ "alex" ], "dislikedBy" : [], "averageAttempts" : 1, "successfulAttempts" : 1, "failureAttempts" : 1, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "55107f3444ae143d89176e94" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : { "$numberLong" : "1" }, "author" : "Populator", "tags" : [ "Set", "String" ], "authorityName" : "mary", "creationDate" : { "$date" : "2015-03-23T21:01:40.838+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-23T21:01:40.838+0000" }, "approvalDate" : { "$date" : "2015-02-21T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "JUNIOR", "taskName" : "20 слов на букву «Л»", "condition" : "Создать множество строк (Set<String>) в методе createSet, занести в него 20 слов на букву «Л».", "sourceCode" : "import java.util.HashSet;\n \n public class Solution\n{\n public static HashSet<String> createSet()\n{\n//Напишите тут ваш код \n HashSet<String> hset = new HashSet<String>();\n  hset.add(\"Лиса\");\n hset.add(\"Лось\");\n hset.add(\"Липа\");\n hset.add(\"Ласка\");\n hset.add(\"Лодка\");\n hset.add(\"Ложка\");\n hset.add(\"Лес\");\n hset.add(\"Лик\");\n hset.add(\"Лицо\");\n hset.add(\"Ламель\");\n hset.add(\"Лишний\");\n hset.add(\"Лопата\");\n hset.add(\"Лейка\");\n hset.add(\"Ластик\");\n hset.add(\"Лимон\");\n hset.add(\"Лайм\");\n hset.add(\"Лимонад\");\n hset.add(\"Лаваш\");\n hset.add(\"Лимончелло\");\n hset.add(\"Лаванда\");\n return hset;\n\n }\n } \n ", "templateCode" : "import java.util.HashSet; \n \n\n    public class Solution \n {\n  public static HashSet<String> createSet()\n {\n   //Напишите тут ваш код\n\n}\n}", "tests" : "import org.junit.Test;\n\n   import java.util.Set;\n   import static org.junit.Assert.assertEquals;\n\n  public class SolutionTest {\n\n @Test\n public void testCreateSet() throws Exception {\n Set<String> stringSet = Solution.createSet();\n assertEquals(stringSet.size() , 20);\n for(String string : stringSet) {\n assertEquals(string.charAt(0) , 'Л');\n }\n\n }\n }", "rating" : 0, "votersAmount" : 4, "likedBy" : [ "beast", "vitek" ], "dislikedBy" : [ "alex", "mary" ], "averageAttempts" : 1, "successfulAttempts" : 2, "failureAttempts" : 1, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "55107f3444ae143d89176e95" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : { "$numberLong" : "30" }, "author" : "Populator", "tags" : [ "методы", "классы" ], "authorityName" : "mary", "creationDate" : { "$date" : "2015-03-23T21:01:40.841+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-30T17:24:28.819+0000" }, "approvalDate" : { "$date" : "2015-02-21T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "JUNIOR", "taskName" : "Метод getName в классе Cat", "condition" : "Переопредели метод getName в классе Cat так, чтобы программа выдавала на экран надпись «Я - кот».", "sourceCode" : "public class Solution \n{\n public static void main(String[] args)\n {\n  Pet pet = new Cat();\n\n   System.out.println(pet.getName());\n }\n\n public static class Pet\n {\n  public String getName()\n {\n  return \"Я - пушистик\";\n }\n }\n\n public static class Cat extends Pet\n {\n   public String getName()\n {\n  return \"Я - кот\";\n }\n }\n }", "templateCode" : "public class Solution\n {\n   public static void main(String[] args)\n   {\n     Pet pet = new Cat();\n\n   System.out.println(pet.getName());\n }\n\n  public static class Pet\n  {\n   public String getName()\n  {\n   return \"Я - пушистик\";\n  }\n   }\n\n  public static class Cat extends Pet\n  {\n    // Напиши свой код здесь\n }\n }", "tests" : "import org.junit.Test;\n\n   import java.io.ByteArrayOutputStream;\n   import java.io.PrintStream;\n\n   import static org.junit.Assert.assertEquals;\n\n   public class SolutionTest {\n\n   @Test\n  public void testMain() throws Exception {\n  PrintStream ps;\n  ByteArrayOutputStream out;\n   PrintStream printStream;\n   String[] result;\n   ps = System.out;\n   out = new ByteArrayOutputStream();\n  printStream = new PrintStream(out);\n  System.setOut(printStream);\n   Solution.main(null);\n   result = out.toString().split(\"\\r?\\n\");\n  assertEquals(result[0], \"Я - кот\");\n  System.setOut(ps);\n }\n }\n ", "rating" : 6, "votersAmount" : 6, "likedBy" : [ "alex", "mary", "sashok", "beast", "vitek", "andrievskiyr" ], "dislikedBy" : [], "averageAttempts" : 1, "successfulAttempts" : 1, "failureAttempts" : 1, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "55107f3444ae143d89176e96" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : { "$numberLong" : "1" }, "author" : "Populator", "tags" : [ "массивы", "Коллекции" ], "authorityName" : "mary", "creationDate" : { "$date" : "2015-03-23T21:01:40.846+0000" }, "lastModifiedBy" : "Populator", "lastModificationDate" : { "$date" : "2015-03-23T21:01:40.846+0000" }, "approvalDate" : { "$date" : "2015-02-21T00:00:01.001+0000" }, "lifeStage" : "APPROVED", "level" : "JUNIOR", "taskName" : "Список из массивов чисел", "condition" : "Создать список, элементами которого будут массивы чисел. Добавить в список пять объектов–массивов длиной 5, 2, 4, 7, 0 соответственно. Заполнить массивы любыми данными и вывести их на экран.", "sourceCode" : "import java.util.ArrayList;\n   import java.util.Collections;\n\n   public class Solution\n {\n   public static void main(String[] args)\n  {\n  ArrayList<int[]> list = createList();\n  printList(list);\n }\n\n  public static ArrayList<int[]> createList()\n  {\n   //Написать тут ваш код\n   ArrayList<int[]> list = new ArrayList<int[]>();\n  int[] array1 = {1 , 2 , 3 , 4 , 5 };\n  int[] array2 = {6 , 7};\n  int[] array3 = {8 , 9 , 10 , 11};\n  int[] array4 = {12, 13, 14, 15, 16, 17, 18};\n  int[] array5 = new int[0];\n  Collections.addAll(list , array1 , array2 , array3 , array4 , array5);\n  return list;\n }\n\n   public static void printList(ArrayList<int[]> list)\n   {\n     for (int[] array: list )\n  {\n      for (int x: array)\n  {\n     System.out.println(x);\n  }\n }\n }\n }", "templateCode" : "import java.util.ArrayList;\n  import java.util.Collections;\n\n   public class Solution\n {\n   public static void main(String[] args)\n  {\n     ArrayList<int[]> list = createList();\n  printList(list);\n }\n\n  public static ArrayList<int[]> createList()\n  {\n    //Написать тут ваш код\n\n  }\n\n  public static void printList(ArrayList<int[]> list)\n  {\n     for (int[] array: list )\n  {\n      for (int x: array)\n  {\n      System.out.println(x);\n  }\n }\n }\n }", "tests" : "import org.junit.Test;\n\n  import java.util.ArrayList;\n  import static org.junit.Assert.assertEquals;\n\n    public class SolutionTest {\n\n  @Test\n   public void testCreateList() throws Exception {\n   ArrayList<int[]> list = Solution.createList();\n  assertEquals(list.get(0).length , 5);\n  assertEquals(list.get(1).length , 2 );\n  assertEquals(list.get(2).length , 4);\n  assertEquals(list.get(3).length , 7);\n  assertEquals(list.get(4).length , 0);\n  }\n }", "rating" : 0, "votersAmount" : 5, "likedBy" : [], "dislikedBy" : [ "alex", "mary", "sashok", "beast", "vitek" ], "averageAttempts" : 1, "successfulAttempts" : 2, "failureAttempts" : 1, "testEnvironment" : "JAVA_JUNIT" }
{ "_id" : { "$oid" : "551819d544aeaa7d70c87732" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : { "$numberLong" : "24" }, "author" : "alex", "tags" : [ "asd", "test" ], "creationDate" : { "$date" : "2015-03-29T15:27:17.390+0000" }, "lastModifiedBy" : "alex", "lastModificationDate" : { "$date" : "2015-03-31T10:47:50.950+0000" }, "lifeStage" : "APPROVED", "level" : "BEGINNER", "taskName" : "Я никогда не буду работать за копейки", "condition" : "Используя цикл вывести на экран сто раз надпись: \n \"Я никогда не буду работать за копейки. Амиго\"", "sourceCode" : "public class Solution { \n\n\t public static void main(String[] args) { \n\n\t\t for(int i = 0; i < 100; ++i) \n\t\t\t System.out.println(\"Я никогда не буду работать за копейки. Амиго\"); \n\n\t } \n }", "templateCode" : "public class Solution { \n\n\t public static void main(String[] args) { \n\n\t\t // Input your code here  \n\n\t } \n }", "tests" : "import org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SolutionTest {\n    //catch console output\n    PrintStream ps;  // save ref to sout\n    ByteArrayOutputStream out;  // create  byte array for info\n    PrintStream printStream;\n\n    String[] result; // take result of console output\n\n\n    @Before\n    public void setUp() throws Exception {\n        //output data\n        ps = System.out;  // save ref to sout\n\n        out = new ByteArrayOutputStream();  // create  byte array for info\n        printStream = new PrintStream(out);\n\n        System.setOut(printStream);\n\n    }\n\n    @Test\n    public void testMain() throws Exception {\n        Solution.main(null);\n        result = out.toString().split(\"\\\\r?\\\\n\");\n        assertEquals(result[0], \"Я никогда не буду работать за копейки. Амиго\");\n\n    }\n\n    @Test\n    public void secondTestMain() throws Exception {\n        Solution.main(null);\n        result = out.toString().split(\"\\\\r?\\\\n\");\n        assertEquals(100, result.length);\n    }\n}", "rating" : -2, "votersAmount" : 2, "likedBy" : [], "dislikedBy" : [ "alex", "mary" ], "averageAttempts" : 0, "successfulAttempts" : 0, "failureAttempts" : 0, "testEnvironment" : "JAVA_JUNIT", "topLevelCommentsId" : [] }
{ "_id" : { "$oid" : "5519b5de975a4b934e2a9db8" }, "_class" : "ru.javarush.taskbook.model.Task", "version" : { "$numberLong" : "12" }, "author" : "mary", "tags" : [], "creationDate" : { "$date" : "2015-03-30T20:45:18.796+0000" }, "lastModifiedBy" : "mary", "lastModificationDate" : { "$date" : "2015-03-30T20:47:17.190+0000" }, "lifeStage" : "APPROVED", "level" : "BEGINNER", "taskName" : "метод getName()", "condition" : "Переопредели метод getName в классе Cat так, чтобы программа выдавала на экран надпись «Я - кот Матроскин».", "sourceCode" : "public class Solution \n{\n public static void main(String[] args)\n {\n  Pet pet = new Cat();\n\n   System.out.println(pet.getName());\n }\n\n public static class Pet\n {\n  public String getName()\n {\n  return \"Я - пушистик\";\n }\n }\n\n public static class Cat extends Pet\n {\n   public String getName()\n {\n  return \"Я - кот Матроскин\";\n }\n }\n }", "templateCode" : "public class Solution\n {\n   public static void main(String[] args)\n   {\n     Pet pet = new Cat();\n\n   System.out.println(pet.getName());\n }\n\n  public static class Pet\n  {\n   public String getName()\n  {\n   return \"Я - пушистик\";\n  }\n   }\n\n  public static class Cat extends Pet\n  {\n    // Напиши свой код здесь\n }\n }", "tests" : "import org.junit.Test;\n\n   import java.io.ByteArrayOutputStream;\n   import java.io.PrintStream;\n\n   import static org.junit.Assert.assertEquals;\n\n   public class SolutionTest {\n\n   @Test\n  public void testMain() throws Exception {\n  PrintStream ps;\n  ByteArrayOutputStream out;\n   PrintStream printStream;\n   String[] result;\n   ps = System.out;\n   out = new ByteArrayOutputStream();\n  printStream = new PrintStream(out);\n  System.setOut(printStream);\n   Solution.main(null);\n   result = out.toString().split(\"\\r?\\n\");\n  assertEquals(result[0], \"Я - кот Матроскин\");\n  System.setOut(ps);\n }\n }\n ", "rating" : 1, "votersAmount" : 1, "likedBy" : [ "mary" ], "dislikedBy" : [], "averageAttempts" : 0, "successfulAttempts" : 0, "failureAttempts" : 0, "testEnvironment" : "JAVA_JUNIT", "topLevelCommentsId" : [] }

